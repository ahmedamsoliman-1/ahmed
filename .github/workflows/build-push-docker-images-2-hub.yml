name: 'build-push-docker-images-2-hub'


on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - master

jobs:
  leader:
    runs-on: ubuntu-latest
    steps:
      - name: echo
        run: |
          echo 'Hello world, leader'

  resumes:
    runs-on: ubuntu-latest
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, resumes'

  svcs:
    runs-on: ubuntu-latest
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, svcs'
  
  nodejss:
    runs-on: ubuntu-latest
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, nodejss'
  
  typescripts:
    runs-on: ubuntu-latest
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, typescripts'
  
  portfolio:
    runs-on: ubuntu-latest
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, abbas'
  
  python-flask-chainlit:
    runs-on: ubuntu-latest
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, python'

  ##### Personal Cloud
  personal-cloud:
    runs-on: ubuntu-latest
    needs: nodejss
    env:
      IMAGE_NAME: aams-personal-cloud

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract branch name
        id: extract_version
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          # Handle PRs and replace slashes
          if [[ $GITHUB_REF == refs/pull/* ]]; then
            BRANCH_NAME="pr-${GITHUB_REF##*/}"
          fi
          # Sanitize branch name for Docker tags
          BRANCH_NAME=$(echo $BRANCH_NAME | sed 's/[^a-zA-Z0-9._-]/_/g')
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          cd ${{ env.PERSONAL_CLOUD }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_PERSONAL_CLOUD }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_PERSONAL_CLOUD }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.PERSONAL_CLOUD }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_PERSONAL_CLOUD }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_PERSONAL_CLOUD }}
          path: output/${{ env.IMAGE_NAME_PERSONAL_CLOUD }}.txt

  frontend-svc:
    runs-on: ubuntu-latest
    needs: svcs
    env:
      IMAGE_NAME: aams-frontend-svc

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.FRONTEND_SVC }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_FRONTEND_SVC }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_FRONTEND_SVC }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.FRONTEND_SVC }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_FRONTEND_SVC }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_FRONTEND_SVC }}
          path: output/${{ env.IMAGE_NAME_FRONTEND_SVC }}.txt

  order-svc:
    runs-on: ubuntu-latest
    needs: svcs
    env:
      IMAGE_NAME: aams-order-svc

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.ORDER_SVC }}
          npm install
      
      - name: Build and push Docker image - ${{ env.IMAGE_NAME_ORDER_SVC }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_ORDER_SVC }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.ORDER_SVC }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_ORDER_SVC }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_ORDER_SVC }}
          path: output/${{ env.IMAGE_NAME_ORDER_SVC }}.txt
  
  user-svc:
    runs-on: ubuntu-latest
    needs: svcs
    env:
      IMAGE_NAME: aams-user-svc

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Install dependencies
        run: |
          cd ${{ env.USER_SVC }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_USER_SVC }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_USER_SVC }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.USER_SVC }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_USER_SVC }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_USER_SVC }}
          path: output/${{ env.IMAGE_NAME_USER_SVC }}.txt

  node-templates:
    runs-on: ubuntu-latest
    needs: nodejss
    env:
      IMAGE_NAME: aams-node-templates

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # - name: Install dependencies
      #   run: |
      #     cd ${{ env.NODE_TEMPLATE }}
      #     npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_NODE_TEMPLATE }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_NODE_TEMPLATE }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.NODE_TEMPLATE }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_NODE_TEMPLATE }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_NODE_TEMPLATE }}
          path: output/${{ env.IMAGE_NAME_NODE_TEMPLATE }}.txt
     
  ###### Resumes
  cv-data-eng:
    runs-on: ubuntu-latest
    needs: resumes
    env:
      IMAGE_NAME: aams-resume-data-eng-pdf

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.RESUME_DATA }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_RESUME_DATA }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_RESUME_DATA }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.RESUME_DATA }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_RESUME_DATA }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DATA }}
          path: output/${{ env.IMAGE_NAME_RESUME_DATA }}.txt

  cv-dev:
    runs-on: ubuntu-latest
    needs: resumes
    env:
      IMAGE_NAME: aams-resume-dev-pdf

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.RESUME_DEV }}
          npm install
        
      - name: Build and push Docker image - ${{ env.IMAGE_NAME_RESUME_DEV }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_RESUME_DEV }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.RESUME_DEV }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_RESUME_DEV }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DEV }}
          path: output/${{ env.IMAGE_NAME_RESUME_DEV }}.txt
    
  cv-dev-web:
    runs-on: ubuntu-latest
    needs: resumes
    env:
      IMAGE_NAME: aams-resume-dev-web

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_RESUME_DEVWEB }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_RESUME_DEVWEB }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.RESUME_DEVWEB }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_RESUME_DEVWEB }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DEVWEB }}
          path: output/${{ env.IMAGE_NAME_RESUME_DEVWEB }}.txt
  
  
  ##### Portfolio
  my-portfolio:
    runs-on: ubuntu-latest
    needs: portfolio
    env:
      IMAGE_NAME: aams-portfolio

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Install dependencies
        run: |
          cd ${{ env.PORTFOLIO }}
          npm install
          npm run build

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_PORTFOLIO }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_PORTFOLIO }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.PORTFOLIO }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_PORTFOLIO }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_PORTFOLIO }}
          path: output/${{ env.IMAGE_NAME_PORTFOLIO }}.txt
  
  ahmedamsoliman-1:
    runs-on: ubuntu-latest
    needs: nodejss
    env:
      IMAGE_NAME: aams-ahmedamsoliman-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Install dependencies
        run: |
          cd ${{ env.AHMEDAMSOLIMAN }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.AHMEDAMSOLIMAN }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}
          path: output/${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}.txt
  
  cvviewer-dev:
    runs-on: ubuntu-latest
    needs: typescripts
    env:
      IMAGE_NAME: aams-cvviewer

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.CV_VIEWER_DEV }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_CV_VIEWER_DEV }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CV_VIEWER_DEV }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.CV_VIEWER_DEV }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_CV_VIEWER_DEV }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DEV }}
          path: output/${{ env.IMAGE_NAME_CV_VIEWER_DEV }}.txt
  
  cvviewer-devops:
    runs-on: ubuntu-latest
    needs: typescripts
    env:
      IMAGE_NAME: aams-cvviewer

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.CV_VIEWER_DEVOPS }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.CV_VIEWER_DEVOPS }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}
          path: output/${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}.txt
  
  cvviewer-ts:
    runs-on: ubuntu-latest
    needs: typescripts
    env:
      IMAGE_NAME: aams-cvviewer

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.CV_VIEWER_TS }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_CV_VIEWER_TS }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CV_VIEWER_TS }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.CV_VIEWER_TS }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_CV_VIEWER_TS }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_TS }}
          path: output/${{ env.IMAGE_NAME_CV_VIEWER_TS }}.txt
  
  cvviewer-dataeng:
    runs-on: ubuntu-latest
    needs: typescripts
    env:
      IMAGE_NAME: aams-cvviewer

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.CV_VIEWER_DATAENG }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.CV_VIEWER_DATAENG }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}
          path: output/${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}.txt

  flask-1:
    runs-on: ubuntu-latest
    needs: python-flask-chainlit

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.PYTHON_FLASK_1 }}
          # npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_PYTHON_FLASK_1 }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_PYTHON_FLASK_1 }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.PYTHON_FLASK_1 }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_PYTHON_FLASK_1 }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_PYTHON_FLASK_1 }}
          path: output/${{ env.IMAGE_NAME_PYTHON_FLASK_1 }}.txt
  
  all-done:
    runs-on: ubuntu-latest
    needs: 
      - personal-cloud
      - frontend-svc
      - order-svc
      - user-svc
      - node-templates
      - cv-data-eng
      - cv-dev-web
      - cv-dev
      - portfolio
      - ahmedamsoliman-1
      - cvviewer-dev
      - cvviewer-devops
      - cvviewer-ts
      - cvviewer-dataeng
      - flask-1

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_FRONTEND_SVC }}

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_USER_SVC }}

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_ORDER_SVC }}

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_PERSONAL_CLOUD }}
        
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_NODE_TEMPLATE }}

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DATA }}

      
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DEV }}

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DEVWEB }}
        
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_PORTFOLIO }}

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}
      
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DEV }}
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_TS }}
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}

      - name: Ls artifact
        run: |
          ls -R
      
      - name: Cat text file
        run: |
          files=($(find . -type f -name "*.txt"))
          for file in "${files[@]}"; do
              cat "$file"
          done

      - name: echo
        run: |
          echo 'ALL DONE'