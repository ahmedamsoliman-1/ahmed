name: 'build-push-docker-images-2-hub'

env:
  ALL_PLATFORMS: linux/amd64,linux/arm64
  LATEST_TAG: 3
  
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - master

jobs:
  leader:
    runs-on: ubuntu-latest
    steps:
      - name: echo
        run: |
          echo 'Hello world, leader'

  resumes:
    runs-on: ubuntu-latest
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, resumes'

  svcs:
    runs-on: ubuntu-latest
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, svcs'
  
  nodejss:
    runs-on: ubuntu-latest
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, nodejss'
  
  typescripts:
    runs-on: ubuntu-latest
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, typescripts'
  
  portfolio:
    runs-on: ubuntu-latest
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, abbas'

  ##### Personal Cloud
  build-push-image-personal-cloud:
    runs-on: ubuntu-latest
    needs: nodejss
    env:
      IMAGE_NAME: aams-personal-cloud

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Extract branch name
      #   id: extract_version
      #   run: |
      #     BRANCH_NAME="${GITHUB_REF#refs/heads/}"
      #     # Handle PRs and replace slashes
      #     if [[ $GITHUB_REF == refs/pull/* ]]; then
      #       BRANCH_NAME="pr-${GITHUB_REF##*/}"
      #     fi
      #     # Sanitize branch name for Docker tags
      #     BRANCH_NAME=$(echo $BRANCH_NAME | sed 's/[^a-zA-Z0-9._-]/_/g')
      #     echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      # - name: Install dependencies
      #   run: |
      #     cd ./apps/nodejs/personal-cloud
      #     npm install

      - name: Build and push Docker images
        if: success()
        run: |
          echo $BRANCH_NAME
          echo $GITHUB_ENV
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ./apps/nodejs/personal-cloud
          mkdir -p output
          echo $IMAGE >> output/images.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: output/images.txt

  # build-push-image-frontend-svc:
  #   runs-on: ubuntu-latest
  #   needs: svcs

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Install dependencies
  #       run: |
  #         cd ./apps/nodejs/frontend-svc
  #         npm install

  #     - name: Build and push Docker images
  #       if: success()
  #       run: |
  #         docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/aams-frontend-svc:2 --push ./apps/nodejs/frontend-svc

  # build-push-image-order-svc:
  #   runs-on: ubuntu-latest
  #   needs: svcs

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Install dependencies
  #       run: |
  #         cd ./apps/nodejs/order-svc
  #         npm install

  #     - name: Build and push Docker images
  #       if: success()
  #       run: |
  #         docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/aams-order-svc:2 --push ./apps/nodejs/order-svc
  
  # build-push-image-user-svc:
  #   runs-on: ubuntu-latest
  #   needs: svcs

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Install dependencies
  #       run: |
  #         cd ./apps/nodejs/user-svc
  #         npm install

  #     - name: Build and push Docker images
  #       if: success()
  #       run: |
  #         docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/aams-user-svc:2 --push ./apps/nodejs/user-svc

  # build-push-image-node-templates:
  #   runs-on: ubuntu-latest
  #   needs: nodejss

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Install dependencies
  #       run: |
  #         cd ./apps/nodejs/node-templates
  #         npm install

  #     - name: Build and push Docker images
  #       if: success()
  #       run: |
  #         docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/aams-node-templates:2 --push ./apps/nodejs/node-templates
     
  # ###### Resumes
  # build-push-image-data-eng:
  #   runs-on: ubuntu-latest
  #   needs: resumes

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Install dependencies
  #       run: |
  #         cd ./apps/static/resume-data-eng-pdf
  #         npm install

  #     - name: Build and push Docker images
  #       if: success()
  #       run: |
  #         docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/aams-resume-data-eng-pdf:2 --push ./apps/static/resume-data-eng-pdf

  # build-push-image-dev:
  #   runs-on: ubuntu-latest
  #   needs: resumes

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Install dependencies
  #       run: |
  #         cd ./apps/static/resume-dev-pdf
  #         npm install

  #     - name: Build and push Docker images
  #       if: success()
  #       run: |
  #         docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/aams-resume-dev-pdf:2 --push ./apps/static/resume-dev-pdf
    
  # build-push-image-dev-web:
  #   runs-on: ubuntu-latest
  #   needs: resumes

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Build and push Docker images
  #       if: success()
  #       run: |
  #         docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/aams-resume-dev-web:2 --push ./apps/static/resume-dev-web
  
  # build-push-image-devops:
  #   runs-on: ubuntu-latest
  #   needs: resumes

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Install dependencies
  #       run: |
  #         cd ./apps/static/resume-devops-pdf
  #         npm install

  #     - name: Build and push Docker images
  #       if: success()
  #       run: |
  #         docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/aams-resume-devops-pdf:2 --push ./apps/static/resume-devops-pdf

  # build-push-image-ts:
  #   runs-on: ubuntu-latest
  #   needs: resumes

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Install dependencies
  #       run: |
  #         cd ./apps/static/resume-ts-pdf
  #         npm install

  #     - name: Build and push Docker images
  #       if: success()
  #       run: |
  #         docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/aams-resume-ts-pdf:2 --push ./apps/static/resume-ts-pdf
  
  # ##### Portfolio
  # build-push-image-portfolio:
  #   runs-on: ubuntu-latest
  #   needs: portfolio

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Install dependencies
  #       run: |
  #         cd ./apps/next-js/portfolio
  #         npm install
  #         npm run build

  #     - name: Build and push Docker images
  #       if: success()
  #       run: |
  #         docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/aams-portfolio:2 --push ./apps/next-js/portfolio
  
  # build-push-image-ahmedamsoliman-1:
  #   runs-on: ubuntu-latest
  #   needs: nodejss

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Install dependencies
  #       run: |
  #         cd ./apps/nodejs/ahmedamsoliman-1
  #         npm install

  #     - name: Build and push Docker images
  #       if: success()
  #       run: |
  #         docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/aams-ahmedamsoliman-1:2 --push ./apps/nodejs/ahmedamsoliman-1
  
  build-push-image-cvviewer-1:
    runs-on: ubuntu-latest
    needs: typescripts
    env:
      IMAGE_NAME: aams-cvviewer

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ./apps/typescript/cvviewer
          npm install

      - name: Build and push Docker images
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ./apps/typescript/cvviewer
          mkdir -p output
          echo $IMAGE >> output/images.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: output/images.txt
  
  all-done:
    runs-on: ubuntu-latest
    needs: 
      - build-push-image-personal-cloud
      # - build-push-image-frontend-svc
      # - build-push-image-order-svc
      # - build-push-image-user-svc
      # - build-push-image-node-templates
      # - build-push-image-data-eng
      # - build-push-image-dev-web
      # - build-push-image-dev
      # - build-push-image-devops
      # - build-push-image-ts
      # - build-push-image-portfolio
      # - build-push-image-ahmedamsoliman-1
      - build-push-image-cvviewer-1

    steps:
      - name: echo
        run: |
          echo 'DONE'