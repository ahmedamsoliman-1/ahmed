# name: 'Build CV Docker Images 2 Hub'

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - master

# env:
#   ALL_PLATFORMS: linux/amd64,linux/arm64
#   LATEST_TAG: '1.0.3'

#   IMAGE_NAME_CV_VIEWER_DEV: aams-aams-cvviewer-resume-dev
#   IMAGE_NAME_CV_VIEWER_DEVOPS: aams-aams-cvviewer-resume-devops
#   IMAGE_NAME_CV_VIEWER_TS: aams-aams-cvviewer-resume-ts
#   IMAGE_NAME_CV_VIEWER_DATAENG: aams-aams-cvviewer-resume-dataeng

#   CV_VIEWER_DEV: ./apps/typescript/aams-cvviewer-resume-dev
#   CV_VIEWER_DEVOPS: ./apps/typescript/aams-cvviewer-resume-devops
#   CV_VIEWER_TS: ./apps/typescript/aams-cvviewer-resume-ts
#   CV_VIEWER_DATAENG: ./apps/typescript/aams-cvviewer-resume-dataeng

# jobs:
#   leader:
#     runs-on: ['ubuntu-latest']
#     steps:
#       - name: echo
#         run: |
#           echo 'Hello world, leader'
  
#   cvviewer-dev:
#     runs-on: ['ubuntu-latest']
#     needs: leader
#     env:
#       IMAGE_NAME: aams-cvviewer

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Install dependencies
#         run: |
#           cd ${{ env.CV_VIEWER_DEV }}
#           npm install

#       - name: Build and push Docker image - ${{ env.IMAGE_NAME_CV_VIEWER_DEV }}
#         if: success()
#         run: |
#           IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CV_VIEWER_DEV }}:${{ env.LATEST_TAG }}
#           docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.CV_VIEWER_DEV }}
#           mkdir -p output
#           echo $IMAGE > output/${{ env.IMAGE_NAME_CV_VIEWER_DEV }}.txt
      
#       - name: Upload artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DEV }}
#           path: output/${{ env.IMAGE_NAME_CV_VIEWER_DEV }}.txt
  
#   cvviewer-devops:
#     runs-on: ['ubuntu-latest']
#     needs: leader
#     env:
#       IMAGE_NAME: aams-cvviewer

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Install dependencies
#         run: |
#           cd ${{ env.CV_VIEWER_DEVOPS }}
#           npm install

#       - name: Build and push Docker image - ${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}
#         if: success()
#         run: |
#           IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}:${{ env.LATEST_TAG }}
#           docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.CV_VIEWER_DEVOPS }}
#           mkdir -p output
#           echo $IMAGE > output/${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}.txt
      
#       - name: Upload artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}
#           path: output/${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}.txt
  
#   cvviewer-ts:
#     runs-on: ['ubuntu-latest']
#     needs: leader
#     env:
#       IMAGE_NAME: aams-cvviewer

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Install dependencies
#         run: |
#           cd ${{ env.CV_VIEWER_TS }}
#           npm install

#       - name: Build and push Docker image - ${{ env.IMAGE_NAME_CV_VIEWER_TS }}
#         if: success()
#         run: |
#           IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CV_VIEWER_TS }}:${{ env.LATEST_TAG }}
#           docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.CV_VIEWER_TS }}
#           mkdir -p output
#           echo $IMAGE > output/${{ env.IMAGE_NAME_CV_VIEWER_TS }}.txt
      
#       - name: Upload artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_TS }}
#           path: output/${{ env.IMAGE_NAME_CV_VIEWER_TS }}.txt
  
#   cvviewer-dataeng:
#     runs-on: ['ubuntu-latest']
#     needs: leader
#     env:
#       IMAGE_NAME: aams-cvviewer

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Install dependencies
#         run: |
#           cd ${{ env.CV_VIEWER_DATAENG }}
#           npm install

#       - name: Build and push Docker image - ${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}
#         if: success()
#         run: |
#           IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}:${{ env.LATEST_TAG }}
#           docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.CV_VIEWER_DATAENG }}
#           mkdir -p output
#           echo $IMAGE > output/${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}.txt
      
#       - name: Upload artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}
#           path: output/${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}.txt


#   cvviewers-artificat:
#     runs-on: ['ubuntu-latest']
#     needs: 
#       - cvviewer-dev
#       - cvviewer-devops
#       - cvviewer-ts
#       - cvviewer-dataeng

#     steps:
#       - name: Download artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DEV }}
#       - name: Download artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}
#       - name: Download artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_TS }}
#       - name: Download artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}

#       - name: Ls artifact
#         run: |
#           ls -R
      
#       - name: Cat text file
#         run: |
#           files=($(find . -type f -name "*.txt"))
#           for file in "${files[@]}"; do
#               cat "$file"
#           done

#       - name: echo
#         run: |
#           echo 'ALL DONE'
  
name: 'Build CV Docker Images 2 Hub'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - master

env:
  ALL_PLATFORMS: linux/amd64,linux/arm64
  LATEST_TAG: '1.0.3'

jobs:
  leader:
    runs-on: ubuntu-latest
    steps:
      - name: echo
        run: echo 'Hello world, leader'

  build-push:
    runs-on: ubuntu-latest
    needs: leader
    strategy:
      matrix:
        app: 
          - name: dev
            path: ./apps/typescript/aams-cvviewer-resume-dev
            image_name: aams-aams-cvviewer-resume-dev
          - name: devops
            path: ./apps/typescript/aams-cvviewer-resume-devops
            image_name: aams-aams-cvviewer-resume-devops
          - name: ts
            path: ./apps/typescript/aams-cvviewer-resume-ts
            image_name: aams-aams-cvviewer-resume-ts
          - name: dataeng
            path: ./apps/typescript/aams-cvviewer-resume-dataeng
            image_name: aams-aams-cvviewer-resume-dataeng

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ matrix.app.path }}
          npm install

      - name: Build and push Docker image - ${{ matrix.app.image_name }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ matrix.app.image_name }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ matrix.app.path }}
          mkdir -p output
          echo $IMAGE > output/${{ matrix.app.image_name }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ matrix.app.image_name }}
          path: output/${{ matrix.app.image_name }}.txt

  gather-artifacts:
    runs-on: ubuntu-latest
    needs: build-push
    strategy:
      matrix:
        app: 
          - name: dev
            image_name: aams-aams-cvviewer-resume-dev
          - name: devops
            image_name: aams-aams-cvviewer-resume-devops
          - name: ts
            image_name: aams-aams-cvviewer-resume-ts
          - name: dataeng
            image_name: aams-aams-cvviewer-resume-dataeng

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ matrix.app.image_name }}
      
      - name: List artifacts
        run: ls -R

      - name: Display artifact content
        run: |
          files=($(find . -type f -name "*.txt"))
          for file in "${files[@]}"; do
              cat "$file"
          done

      - name: echo
        run: echo 'ALL DONE'
