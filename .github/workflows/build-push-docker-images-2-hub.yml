name: 'build-push-docker-images-2-hub'

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

# env:
#   ALL_PLATFORMS: linux/amd64,linux/arm64
#   LATEST_TAG: '1.0.2'

#   IMAGE_NAMES:
#     FRONTEND_SVC: aams-frontend-svc
#     USER_SVC: aams-user-svc
#     ORDER_SVC: aams-order-svc
#     PERSONAL_CLOUD: aams-personal-cloud
#     NODE_TEMPLATE: aams-node-templates
#     RESUME_DATA: aams-resume-data-eng-pdf
#     RESUME_DEV: aams-resume-dev-pdf
#     RESUME_DEVOPS: aams-resume-devops-pdf
#     RESUME_TS: aams-resume-ts-pdf
#     RESUME_DEVWEB: aams-resume-dev-web
#     PORTFOLIO: aams-portfolio
#     AHMEDAMSOLIMAN: aams-ahmedamsoliman-1
#     CV_VIEWER_DEV: aams-aams-cvviewer-resume-dev
#     CV_VIEWER_DEVOPS: aams-aams-cvviewer-resume-devops
#     CV_VIEWER_TS: aams-aams-cvviewer-resume-ts
#     CV_VIEWER_DATAENG: aams-aams-cvviewer-resume-dataeng
#     PYTHON_FLASK_1: aams-flask-1

#   PATHS:
#     FRONTEND_SVC: ./apps/nodejs/frontend-svc
#     USER_SVC: ./apps/nodejs/user-svc
#     ORDER_SVC: ./apps/nodejs/order-svc
#     PERSONAL_CLOUD: ./apps/nodejs/personal-cloud
#     NODE_TEMPLATE: ./apps/nodejs/node-templates
#     RESUME_DATA: ./apps/static/resume-data-eng-pdf
#     RESUME_DEV: ./apps/static/resume-dev-pdf
#     RESUME_DEVOPS: ./apps/static/resume-devops-pdf
#     RESUME_TS: ./apps/static/resume-ts-pdf
#     RESUME_DEVWEB: ./apps/static/resume-dev-web
#     PORTFOLIO: ./apps/next-js/portfolio
#     AHMEDAMSOLIMAN: ./apps/nodejs/ahmedamsoliman-1
#     CV_VIEWER_DEV: ./apps/typescript/aams-cvviewer-resume-dev
#     CV_VIEWER_DEVOPS: ./apps/typescript/aams-cvviewer-resume-devops
#     CV_VIEWER_TS: ./apps/typescript/aams-cvviewer-resume-ts
#     CV_VIEWER_DATAENG: ./apps/typescript/aams-cvviewer-resume-dataeng
#     PYTHON_FLASK_1: ./apps/python/flask/flask_app_1

env:
  ALL_PLATFORMS: linux/amd64,linux/arm64
  LATEST_TAG: '1.0.2'
  # RUNNER: ['ubuntu-latest']

  IMAGE_NAME_FRONTEND_SVC: aams-frontend-svc
  IMAGE_NAME_USER_SVC: aams-user-svc
  IMAGE_NAME_ORDER_SVC: aams-order-svc
  IMAGE_NAME_PERSONAL_CLOUD: aams-personal-cloud
  IMAGE_NAME_NODE_TEMPLATE: aams-node-templates
  IMAGE_NAME_NODE_LINKS: aams-links
  IMAGE_NAME_RESUME_DATA: aams-resume-data-eng-pdf
  IMAGE_NAME_RESUME_DEV: aams-resume-dev-pdf
  IMAGE_NAME_RESUME_DEVOPS: aams-resume-devops-pdf
  IMAGE_NAME_RESUME_TS: aams-resume-ts-pdf
  IMAGE_NAME_RESUME_DEVWEB: aams-resume-dev-web
  IMAGE_NAME_PORTFOLIO: aams-portfolio
  IMAGE_NAME_AHMEDAMSOLIMAN: aams-ahmedamsoliman-1
  IMAGE_NAME_CV_VIEWER_DEV: aams-aams-cvviewer-resume-dev
  IMAGE_NAME_CV_VIEWER_DEVOPS: aams-aams-cvviewer-resume-devops
  IMAGE_NAME_CV_VIEWER_TS: aams-aams-cvviewer-resume-ts
  IMAGE_NAME_CV_VIEWER_DATAENG: aams-aams-cvviewer-resume-dataeng
  IMAGE_NAME_PYTHON_FLASK_1: aams-flask-1

  IMAGE_NAME_GO_LINKTREE_1: go-linktree-1

  IMAGE_NAME_XX_1: xx_1
  IMAGE_NAME_XX_2: xx_2
  IMAGE_NAME_XX_3: xx_3
  IMAGE_NAME_XX_4: xx_4
  IMAGE_NAME_XX_5: xx_5
  
  FRONTEND_SVC: ./apps/nodejs/frontend-svc
  USER_SVC: ./apps/nodejs/user-svc
  ORDER_SVC: ./apps/nodejs/order-svc
  PERSONAL_CLOUD: ./apps/nodejs/personal-cloud
  NODE_TEMPLATE: ./apps/nodejs/node-templates
  NODE_LINKS: ./apps/nodejs/aams-links
  RESUME_DATA: ./apps/static/resume-data-eng-pdf
  RESUME_DEV: ./apps/static/resume-dev-pdf
  RESUME_DEVOPS: ./apps/static/resume-devops-pdf
  RESUME_TS: ./apps/static/resume-ts-pdf
  RESUME_DEVWEB: ./apps/static/resume-dev-web
  PORTFOLIO: ./apps/next-js/portfolio
  AHMEDAMSOLIMAN: ./apps/nodejs/ahmedamsoliman-1
  CV_VIEWER_DEV: ./apps/typescript/aams-cvviewer-resume-dev
  CV_VIEWER_DEVOPS: ./apps/typescript/aams-cvviewer-resume-devops
  CV_VIEWER_TS: ./apps/typescript/aams-cvviewer-resume-ts
  CV_VIEWER_DATAENG: ./apps/typescript/aams-cvviewer-resume-dataeng
  PYTHON_FLASK_1: ./apps/python/flask/flask_app_1

  GO_LINKTREE_1: ./apps/go/linktree
  XX_1: ./apps/python/flask/flask_app_1  # ./apps/python/flask/xx
  XX_2: ./apps/python/flask/flask_app_1  # ./apps/python/flask/xx
  XX_3: ./apps/python/flask/flask_app_1  # ./apps/python/flask/xx
  XX_4: ./apps/python/flask/flask_app_1  # ./apps/python/flask/xx
  XX_5: ./apps/python/flask/flask_app_1  # ./apps/python/flask/xx

jobs:
  leader:
    runs-on: ['ubuntu-latest']
    steps:
      - name: echo
        run: |
          echo 'Hello world, leader'

  resumes:
    runs-on: ['ubuntu-latest']
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, resumes'

  svcs:
    runs-on: ['ubuntu-latest']
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, svcs'
  
  nodejss:
    runs-on: ['ubuntu-latest']
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, nodejss'
  
  typescripts:
    runs-on: ['ubuntu-latest']
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, typescripts'
  
  portfolio:
    runs-on: ['ubuntu-latest']
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, abbas'
  
  python-flask-chainlit:
    runs-on: ['ubuntu-latest']
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, python'
  
  go:
    runs-on: ['ubuntu-latest']
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, golang'
      
  xx-parent:
    runs-on: ['ubuntu-latest']
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, XX'

  ##### Personal Cloud
  personal-cloud:
    runs-on: ['ubuntu-latest']
    needs: nodejss
    env:
      IMAGE_NAME: aams-personal-cloud

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # - name: Set up Node.js 20
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: '20'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract branch name
        id: extract_version
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          # Handle PRs and replace slashes
          if [[ $GITHUB_REF == refs/pull/* ]]; then
            BRANCH_NAME="pr-${GITHUB_REF##*/}"
          fi
          # Sanitize branch name for Docker tags
          BRANCH_NAME=$(echo $BRANCH_NAME | sed 's/[^a-zA-Z0-9._-]/_/g')
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          cd ${{ env.PERSONAL_CLOUD }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_PERSONAL_CLOUD }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_PERSONAL_CLOUD }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.PERSONAL_CLOUD }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_PERSONAL_CLOUD }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_PERSONAL_CLOUD }}
          path: output/${{ env.IMAGE_NAME_PERSONAL_CLOUD }}.txt


  frontend-svc:
    runs-on: ['ubuntu-latest']
    needs: svcs
    env:
      IMAGE_NAME: aams-frontend-svc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.FRONTEND_SVC }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_FRONTEND_SVC }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_FRONTEND_SVC }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.FRONTEND_SVC }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_FRONTEND_SVC }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_FRONTEND_SVC }}
          path: output/${{ env.IMAGE_NAME_FRONTEND_SVC }}.txt

  order-svc:
    runs-on: ['ubuntu-latest']
    needs: svcs
    env:
      IMAGE_NAME: aams-order-svc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.ORDER_SVC }}
          npm install
      
      - name: Build and push Docker image - ${{ env.IMAGE_NAME_ORDER_SVC }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_ORDER_SVC }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.ORDER_SVC }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_ORDER_SVC }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_ORDER_SVC }}
          path: output/${{ env.IMAGE_NAME_ORDER_SVC }}.txt
  
  user-svc:
    runs-on: ['ubuntu-latest']
    needs: svcs
    env:
      IMAGE_NAME: aams-user-svc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Install dependencies
        run: |
          cd ${{ env.USER_SVC }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_USER_SVC }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_USER_SVC }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.USER_SVC }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_USER_SVC }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_USER_SVC }}
          path: output/${{ env.IMAGE_NAME_USER_SVC }}.txt

  node-templates:
    runs-on: ['ubuntu-latest']
    needs: nodejss
    env:
      IMAGE_NAME: aams-node-templates

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # - name: Install dependencies
      #   run: |
      #     cd ${{ env.NODE_TEMPLATE }}
      #     npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_NODE_TEMPLATE }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_NODE_TEMPLATE }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.NODE_TEMPLATE }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_NODE_TEMPLATE }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_NODE_TEMPLATE }}
          path: output/${{ env.IMAGE_NAME_NODE_TEMPLATE }}.txt
    
  aams-links:
    runs-on: ['ubuntu-latest']
    needs: nodejss

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Install dependencies
        run: |
          cd ${{ env.NODE_LINKS }}
          npm install
          echo "MONGO_URL_AAMS_LINKS=${{ secrets.MONGO_URL_AAMS_LINKS }}" >> .env

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_NODE_LINKS }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_NODE_LINKS }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.NODE_LINKS }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_NODE_LINKS }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_NODE_LINKS }}
          path: output/${{ env.IMAGE_NAME_NODE_LINKS }}.txt
     
  ###### Resumes
  cv-data-eng:
    runs-on: ['ubuntu-latest']
    needs: resumes
    env:
      IMAGE_NAME: aams-resume-data-eng-pdf

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.RESUME_DATA }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_RESUME_DATA }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_RESUME_DATA }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.RESUME_DATA }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_RESUME_DATA }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DATA }}
          path: output/${{ env.IMAGE_NAME_RESUME_DATA }}.txt

  cv-dev:
    runs-on: ['ubuntu-latest']
    needs: resumes
    env:
      IMAGE_NAME: aams-resume-dev-pdf

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.RESUME_DEV }}
          npm install
        
      - name: Build and push Docker image - ${{ env.IMAGE_NAME_RESUME_DEV }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_RESUME_DEV }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.RESUME_DEV }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_RESUME_DEV }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DEV }}
          path: output/${{ env.IMAGE_NAME_RESUME_DEV }}.txt
    
  cv-dev-web:
    runs-on: ['ubuntu-latest']
    needs: resumes
    env:
      IMAGE_NAME: aams-resume-dev-web

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_RESUME_DEVWEB }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_RESUME_DEVWEB }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.RESUME_DEVWEB }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_RESUME_DEVWEB }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DEVWEB }}
          path: output/${{ env.IMAGE_NAME_RESUME_DEVWEB }}.txt
  
  
  ##### Portfolio
  my-portfolio:
    runs-on: ['ubuntu-latest']
    needs: portfolio
    env:
      IMAGE_NAME: aams-portfolio

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Install dependencies
        run: |
          cd ${{ env.PORTFOLIO }}
          npm install
          npm run build

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_PORTFOLIO }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_PORTFOLIO }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.PORTFOLIO }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_PORTFOLIO }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_PORTFOLIO }}
          path: output/${{ env.IMAGE_NAME_PORTFOLIO }}.txt
  
  ahmedamsoliman-1:
    runs-on: ['ubuntu-latest']
    needs: nodejss
    env:
      IMAGE_NAME: aams-ahmedamsoliman-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Install dependencies
        run: |
          cd ${{ env.AHMEDAMSOLIMAN }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.AHMEDAMSOLIMAN }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}
          path: output/${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}.txt
  
  cvviewer-dev:
    runs-on: ['ubuntu-latest']
    needs: typescripts
    env:
      IMAGE_NAME: aams-cvviewer

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.CV_VIEWER_DEV }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_CV_VIEWER_DEV }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CV_VIEWER_DEV }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.CV_VIEWER_DEV }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_CV_VIEWER_DEV }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DEV }}
          path: output/${{ env.IMAGE_NAME_CV_VIEWER_DEV }}.txt
  
  cvviewer-devops:
    runs-on: ['ubuntu-latest']
    needs: typescripts
    env:
      IMAGE_NAME: aams-cvviewer

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.CV_VIEWER_DEVOPS }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.CV_VIEWER_DEVOPS }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}
          path: output/${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}.txt
  
  cvviewer-ts:
    runs-on: ['ubuntu-latest']
    needs: typescripts
    env:
      IMAGE_NAME: aams-cvviewer

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.CV_VIEWER_TS }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_CV_VIEWER_TS }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CV_VIEWER_TS }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.CV_VIEWER_TS }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_CV_VIEWER_TS }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_TS }}
          path: output/${{ env.IMAGE_NAME_CV_VIEWER_TS }}.txt
  
  cvviewer-dataeng:
    runs-on: ['ubuntu-latest']
    needs: typescripts
    env:
      IMAGE_NAME: aams-cvviewer

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.CV_VIEWER_DATAENG }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.CV_VIEWER_DATAENG }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}
          path: output/${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}.txt

  flask-1:
    runs-on: ['ubuntu-latest']
    needs: python-flask-chainlit

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.PYTHON_FLASK_1 }}
          # npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_PYTHON_FLASK_1 }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_PYTHON_FLASK_1 }}:${{ env.LATEST_TAG }}
          docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.PYTHON_FLASK_1 }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_PYTHON_FLASK_1 }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_PYTHON_FLASK_1 }}
          path: output/${{ env.IMAGE_NAME_PYTHON_FLASK_1 }}.txt
  
  xx-1:
    runs-on: ['ubuntu-latest']
    needs: xx-parent

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Install dependencies
      #   run: |
      #     pwd

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_XX_1 }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_XX_1 }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.XX_1 }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_XX_1 }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_XX_1 }}
          path: output/${{ env.IMAGE_NAME_XX_1 }}.txt
  xx-2:
    runs-on: ['ubuntu-latest']
    needs: xx-parent

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Install dependencies
      #   run: |
      #     pwd

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_XX_2 }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_XX_2 }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.XX_2 }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_XX_2 }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_XX_2 }}
          path: output/${{ env.IMAGE_NAME_XX_2 }}.txt
    
  xx-3:
    runs-on: ['ubuntu-latest']
    needs: xx-parent

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Install dependencies
      #   run: |
      #     pwd

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_XX_3 }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_XX_3 }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.XX_3 }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_XX_3 }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_XX_3 }}
          path: output/${{ env.IMAGE_NAME_XX_3 }}.txt
    
  xx-4:
    runs-on: ['ubuntu-latest']
    needs: xx-parent

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Install dependencies
      #   run: |
      #     pwd

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_XX_4 }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_XX_4 }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.XX_4 }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_XX_4 }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_XX_4 }}
          path: output/${{ env.IMAGE_NAME_XX_4 }}.txt
    
  xx-5:
    runs-on: ['ubuntu-latest']
    needs: xx-parent

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Install dependencies
      #   run: |
      #     pwd

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_XX_5 }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_XX_5 }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.XX_5 }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_XX_5 }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_XX_5 }}
          path: output/${{ env.IMAGE_NAME_XX_5 }}.txt
    
  xx-artificat:
    runs-on: ['ubuntu-latest']
    needs: 
      - xx-1
      - xx-2
      - xx-3
      - xx-4
      - xx-5

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_XX_1 }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_XX_2 }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_XX_3 }}
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_XX_4 }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_XX_5 }}

      - name: Ls artifact
        run: |
          ls -R
      
      - name: Cat text file
        run: |
          files=($(find . -type f -name "*.txt"))
          for file in "${files[@]}"; do
              cat "$file"
          done

      - name: echo
        run: |
          echo 'ALL DONE'
    
  go-linktree-1:
    runs-on: ['ubuntu-latest']
    needs: go

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


      - name: Build and push Docker image - ${{ env.IMAGE_NAME_GO_LINKTREE_1 }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_GO_LINKTREE_1 }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.GO_LINKTREE_1 }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_GO_LINKTREE_1 }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_GO_LINKTREE_1 }}
          path: output/${{ env.IMAGE_NAME_GO_LINKTREE_1 }}.txt
    
  go-artificat:
    runs-on: ['ubuntu-latest']
    needs: 
      - go-linktree-1
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          
          name: docker-image-${{ env.IMAGE_NAME_GO_LINKTREE_1 }}
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_GO_LINKTREE_1 }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_GO_LINKTREE_1 }}

      - name: Ls artifact
        run: |
          ls -R
      
      - name: Cat text file
        run: |
          files=($(find . -type f -name "*.txt"))
          for file in "${files[@]}"; do
              cat "$file"
          done

      - name: echo
        run: |
          echo 'ALL DONE'
  
  svcs-artificat:
    runs-on: ['ubuntu-latest']
    needs: 
      - frontend-svc
      - order-svc
      - user-svc

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_FRONTEND_SVC }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_USER_SVC }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_ORDER_SVC }}

      - name: Ls artifact
        run: |
          ls -R
      
      - name: Cat text file
        run: |
          files=($(find . -type f -name "*.txt"))
          for file in "${files[@]}"; do
              cat "$file"
          done

      - name: echo
        run: |
          echo 'ALL DONE'
  
  cvviewers-artificat:
    runs-on: ['ubuntu-latest']
    needs: 
      - cvviewer-dev
      - cvviewer-devops
      - cvviewer-ts
      - cvviewer-dataeng

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DEV }}
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DEVOPS }}
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_TS }}
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER_DATAENG }}

      - name: Ls artifact
        run: |
          ls -R
      
      - name: Cat text file
        run: |
          files=($(find . -type f -name "*.txt"))
          for file in "${files[@]}"; do
              cat "$file"
          done

      - name: echo
        run: |
          echo 'ALL DONE'
  
  cvs-artificat:
    runs-on: ['ubuntu-latest']
    needs: 
      - cv-data-eng
      - cv-dev-web
      - cv-dev

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DATA }}

      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DEV }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DEVWEB }}

      - name: Ls artifact
        run: |
          ls -R
      
      - name: Cat text file
        run: |
          files=($(find . -type f -name "*.txt"))
          for file in "${files[@]}"; do
              cat "$file"
          done

      - name: echo
        run: |
          echo 'ALL DONE'

  all-done:
    runs-on: ['ubuntu-latest']
    needs: 
      - personal-cloud
      - node-templates
      - aams-links
      - cvs-artificat
      - portfolio
      - ahmedamsoliman-1
      - flask-1
      - cvviewers-artificat
      - svcs-artificat
      - xx-artificat
      - go-artificat

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_PERSONAL_CLOUD }}
        
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_NODE_TEMPLATE }}
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_NODE_LINKS }}
        
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_PORTFOLIO }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ env.IMAGE_NAME_GO_LINKTREE_1 }}

      - name: Ls artifact
        run: |
          ls -R
      
      - name: Cat text file
        run: |
          files=($(find . -type f -name "*.txt"))
          for file in "${files[@]}"; do
              cat "$file"
          done

      - name: echo
        run: |
          echo 'ALL DONE'