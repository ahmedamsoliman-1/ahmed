name: 'build-push-docker-images-2-hub'

env:
  ALL_PLATFORMS: linux/amd64,linux/arm64
  LATEST_TAG: 3

  IMAGE_NAME_FRONTEND_SVC: aams-frontend-svc
  IMAGE_NAME_USER_SVC: aams-user-svc
  IMAGE_NAME_ORDER_SVC: aams-order-svc
  IMAGE_NAME_PERSONAL_CLOUD: aams-personal-cloud
  IMAGE_NAME_NODE_TEMPLATE: aams-node-templates
  IMAGE_NAME_RESUME_DATA: aams-resume-data-eng-pdf
  IMAGE_NAME_RESUME_DEV: aams-resume-dev-pdf
  IMAGE_NAME_RESUME_DEVOPS: aams-resume-devops-pdf
  IMAGE_NAME_RESUME_TS: aams-resume-ts-pdf
  IMAGE_NAME_RESUME_DEVWEB: aams-resume-dev-web
  IMAGE_NAME_PORTFOLIO: aams-portfolio
  IMAGE_NAME_AHMEDAMSOLIMAN: aams-ahmedamsoliman-1
  IMAGE_NAME_CV_VIEWER: aams-cvviewer
  
  FRONTEND_SVC: ./apps/nodejs/frontend-svc
  USER_SVC: ./apps/nodejs/user-svc
  ORDER_SVC: ./apps/nodejs/order-svc
  PERSONAL_CLOUD: ./apps/nodejs/personal-cloud
  NODE_TEMPLATE: ./apps/nodejs/node-templates
  RESUME_DATA: ./apps/static/resume-data-eng-pdf
  RESUME_DEV: ./apps/static/resume-dev-pdf
  RESUME_DEVOPS: ./apps/static/resume-devops-pdf
  RESUME_TS: ./apps/static/resume-ts-pdf
  RESUME_DEVWEB: ./apps/static/resume-dev-web
  PORTFOLIO: ./apps/next-js/portfolio
  AHMEDAMSOLIMAN: ./apps/nodejs/ahmedamsoliman-1
  CV_VIEWER: ./apps/typescript/cvviewer

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - master

jobs:
  leader:
    runs-on: ubuntu-latest
    steps:
      - name: echo
        run: |
          echo 'Hello world, leader'

  resumes:
    runs-on: ubuntu-latest
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, resumes'

  svcs:
    runs-on: ubuntu-latest
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, svcs'
  
  nodejss:
    runs-on: ubuntu-latest
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, nodejss'
  
  typescripts:
    runs-on: ubuntu-latest
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, typescripts'
  
  portfolio:
    runs-on: ubuntu-latest
    needs: leader
    steps:
      - name: echo
        run: |
          echo 'Hello world, abbas'

  ##### Personal Cloud
  build-push-image-personal-cloud:
    runs-on: ubuntu-latest
    needs: nodejss
    env:
      IMAGE_NAME: aams-personal-cloud

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract branch name
        id: extract_version
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          # Handle PRs and replace slashes
          if [[ $GITHUB_REF == refs/pull/* ]]; then
            BRANCH_NAME="pr-${GITHUB_REF##*/}"
          fi
          # Sanitize branch name for Docker tags
          BRANCH_NAME=$(echo $BRANCH_NAME | sed 's/[^a-zA-Z0-9._-]/_/g')
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          cd ${{ env.PERSONAL_CLOUD }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_PERSONAL_CLOUD }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_PERSONAL_CLOUD }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.PERSONAL_CLOUD }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_PERSONAL_CLOUD }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_PERSONAL_CLOUD }}
          path: output/${{ env.IMAGE_NAME_PERSONAL_CLOUD }}.txt

  build-push-image-frontend-svc:
    runs-on: ubuntu-latest
    needs: svcs
    env:
      IMAGE_NAME: aams-frontend-svc

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.FRONTEND_SVC }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_FRONTEND_SVC }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_FRONTEND_SVC }}:${{ env.LATEST_TAG }}
          # # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.FRONTEND_SVC }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_FRONTEND_SVC }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_FRONTEND_SVC }}
          path: output/${{ env.IMAGE_NAME_FRONTEND_SVC }}.txt

  build-push-image-order-svc:
    runs-on: ubuntu-latest
    needs: svcs
    env:
      IMAGE_NAME: aams-order-svc

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.ORDER_SVC }}
          npm install
      
      - name: Build and push Docker image - ${{ env.IMAGE_NAME_ORDER_SVC }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_ORDER_SVC }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.ORDER_SVC }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_ORDER_SVC }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_ORDER_SVC }}
          path: output/${{ env.IMAGE_NAME_ORDER_SVC }}.txt
  
  build-push-image-user-svc:
    runs-on: ubuntu-latest
    needs: svcs
    env:
      IMAGE_NAME: aams-user-svc

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Install dependencies
        run: |
          cd ${{ env.USER_SVC }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_USER_SVC }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_USER_SVC }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.USER_SVC }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_USER_SVC }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_USER_SVC }}
          path: output/${{ env.IMAGE_NAME_USER_SVC }}.txt

  build-push-image-node-templates:
    runs-on: ubuntu-latest
    needs: nodejss
    env:
      IMAGE_NAME: aams-node-templates

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # - name: Install dependencies
      #   run: |
      #     cd ${{ env.NODE_TEMPLATE }}
      #     npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_NODE_TEMPLATE }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_NODE_TEMPLATE }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.NODE_TEMPLATE }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_NODE_TEMPLATE }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_NODE_TEMPLATE }}
          path: output/${{ env.IMAGE_NAME_NODE_TEMPLATE }}.txt
     
  ###### Resumes
  build-push-image-data-eng:
    runs-on: ubuntu-latest
    needs: resumes
    env:
      IMAGE_NAME: aams-resume-data-eng-pdf

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.RESUME_DATA }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_RESUME_DATA }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_RESUME_DATA }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.RESUME_DATA }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_RESUME_DATA }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DATA }}
          path: output/${{ env.IMAGE_NAME_RESUME_DATA }}.txt

  build-push-image-dev:
    runs-on: ubuntu-latest
    needs: resumes
    env:
      IMAGE_NAME: aams-resume-dev-pdf

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.RESUME_DEV }}
          npm install
        
      - name: Build and push Docker image - ${{ env.IMAGE_NAME_RESUME_DEV }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_RESUME_DEV }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.RESUME_DEV }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_RESUME_DEV }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DEV }}
          path: output/${{ env.IMAGE_NAME_RESUME_DEV }}.txt
    
  build-push-image-dev-web:
    runs-on: ubuntu-latest
    needs: resumes
    env:
      IMAGE_NAME: aams-resume-dev-web

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_RESUME_DEVWEB }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_RESUME_DEVWEB }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.RESUME_DEVWEB }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_RESUME_DEVWEB }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DEVWEB }}
          path: output/${{ env.IMAGE_NAME_RESUME_DEVWEB }}.txt
  
  # build-push-image-devops:
  #   runs-on: ubuntu-latest
  #   needs: resumes
  #   env:
  #     IMAGE_NAME: aams-resume-devops-pdf

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Build and push Docker image - ${{ env.IMAGE_NAME_RESUME_DEVOPS }}
  #       if: success()
  #       run: |
  #         IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_RESUME_DEVOPS }}:${{ env.LATEST_TAG }}
  #         # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.CV_VIEWERR }}
  #         mkdir -p output
  #         echo $IMAGE > output/${{ env.IMAGE_NAME_RESUME_DEVOPS }}.txt
      
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: docker-image-${{ env.IMAGE_NAME_RESUME_DEVOPS }}
  #         path: output/${{ env.IMAGE_NAME_RESUME_DEVOPS }}.txt

  # build-push-image-ts:
  #   runs-on: ubuntu-latest
  #   needs: resumes
  #   env:
  #     IMAGE_NAME: aams-resume-ts-pdf

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Build and push Docker image - ${{ env.IMAGE_NAME_RESUME_TS }}
  #       if: success()
  #       run: |
  #         IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_RESUME_TS }}:${{ env.LATEST_TAG }}
  #         # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.CV_VIEWERR }}
  #         mkdir -p output
  #         echo $IMAGE > output/${{ env.IMAGE_NAME_RESUME_TS }}.txt
      
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: docker-image-${{ env.IMAGE_NAME_RESUME_TS }}
  #         path: output/${{ env.IMAGE_NAME_RESUME_TS }}.txt
  
  ##### Portfolio
  build-push-image-portfolio:
    runs-on: ubuntu-latest
    needs: portfolio
    env:
      IMAGE_NAME: aams-portfolio

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Install dependencies
        run: |
          cd ${{ env.PORTFOLIO }}
          npm install
          npm run build

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_PORTFOLIO }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_PORTFOLIO }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.PORTFOLIO }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_PORTFOLIO }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_PORTFOLIO }}
          path: output/${{ env.IMAGE_NAME_PORTFOLIO }}.txt
  
  build-push-image-ahmedamsoliman-1:
    runs-on: ubuntu-latest
    needs: nodejss
    env:
      IMAGE_NAME: aams-ahmedamsoliman-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Install dependencies
        run: |
          cd ${{ env.AHMEDAMSOLIMAN }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.AHMEDAMSOLIMAN }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}
          path: output/${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}.txt
  
  build-push-image-cvviewer-1:
    runs-on: ubuntu-latest
    needs: typescripts
    env:
      IMAGE_NAME: aams-cvviewer

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd ${{ env.CV_VIEWER }}
          npm install

      - name: Build and push Docker image - ${{ env.IMAGE_NAME_CV_VIEWER }}
        if: success()
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CV_VIEWER }}:${{ env.LATEST_TAG }}
          # docker buildx build --platform ${{ env.ALL_PLATFORMS }} -t $IMAGE --push ${{ env.CV_VIEWER }}
          mkdir -p output
          echo $IMAGE > output/${{ env.IMAGE_NAME_CV_VIEWER }}.txt
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER }}
          path: output/${{ env.IMAGE_NAME_CV_VIEWER }}.txt
  
  
  all-done:
    runs-on: ubuntu-latest
    needs: 
      - build-push-image-personal-cloud
      - build-push-image-frontend-svc
      - build-push-image-order-svc
      - build-push-image-user-svc
      - build-push-image-node-templates
      - build-push-image-data-eng
      - build-push-image-dev-web
      - build-push-image-dev
      # - build-push-image-devops
      # - build-push-image-ts
      - build-push-image-portfolio
      - build-push-image-ahmedamsoliman-1
      - build-push-image-cvviewer-1

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_FRONTEND_SVC }}

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_USER_SVC }}

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_ORDER_SVC }}

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_PERSONAL_CLOUD }}
        
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_NODE_TEMPLATE }}

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DATA }}

      
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DEV }}

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DEVOPS }}

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_TS }}

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_RESUME_DEVWEB }}
        
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_PORTFOLIO }}

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_AHMEDAMSOLIMAN }}
      
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-${{ env.IMAGE_NAME_CV_VIEWER }}

      - name: Ls artifact
        run: |
          ls -R
      - name: echo
        run: |
          echo 'DONE'